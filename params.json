{"name":"Antigen","tagline":"A plugin manager for zsh, inspired by oh-my-zsh and vundle.","body":"# Antigen <sup>&beta;</sup>\r\n\r\n[![Build Status](https://secure.travis-ci.org/zsh-users/antigen.png)](http://travis-ci.org/zsh-users/antigen)\r\n\r\nAntigen is a small set of functions that help you easily manage your shell (zsh)\r\nplugins, called bundles. The concept is pretty much the same as bundles in a\r\ntypical vim+pathogen setup. Antigen is to zsh, what [Vundle][] is to vim.\r\n\r\nPlease note that this is a very new project and can be considered beta at best.\r\nThat said, I am using antigen full time now on my work machine.\r\n\r\nNote: Please read the commit comments of the changesets when you pull a new\r\nversion of antigen.\r\n\r\n## Show off\r\n\r\n> Enough talk. Let's fight!\r\n>   -- Po, Kung-fu Panda.\r\n\r\nYou're going to experience antigen right in your open shell. No `.zshrc`\r\ntweaking and reading the rest of this documentation. Kinda like an ice-cream\r\nsample, if you will.\r\n\r\nGet and load antigen.\r\n\r\n    curl https://raw.github.com/zsh-users/antigen/master/antigen.zsh > antigen.zsh\r\n    source antigen.zsh\r\n\r\nThere. You now have all the antigen goodies. Let's try install some plugins. How\r\nabout some color to start with. Get the [syntax highlighting plugin][] by\r\nrunning\r\n\r\n    antigen bundle zsh-users/zsh-syntax-highlighting\r\n\r\nNow let it do its thing and once you're back at your prompt, try and type a\r\ncommand. See that? Colors!\r\n\r\nSo, you do git? ruby? git and ruby? There are lots of awesome plugins over at\r\noh-my-zsh. Treat yourself to some.\r\n\r\n    antigen bundle robbyrussell/oh-my-zsh plugins/ruby\r\n    # Or for the lazy,\r\n    antigen bundle git\r\n\r\nThere are lots of plugins out there in the wild and people are writing zsh\r\nutilities as small scripts all the time. Antigen is compatible with all of them.\r\nThe plugins and scripts don't need any special handling to be compatible with\r\nantigen.\r\n\r\nAnother example, [kennethreitz's autoenv][autoenv] (or [my fork][f-autoenv] of\r\nit). Just a bundle command away.\r\n\r\n    antigen bundle sharat87/autoenv\r\n\r\nAnd boom! you have all the autoenv goodness. Just remember how you used to do\r\nthese before antigen, clone it, modify your zshrc to source it, load a new\r\nterminal, all just to test it out. Duh!\r\n\r\nA subtle aspect of this is that you can tell antigen to grab just about anything\r\nfrom anyone's `dotfiles` repo, as long as it is in a directory under any repo on\r\ngithub.\r\n\r\nAnd themes? How would you like a fancy new prompt for yourself?\r\n\r\n    antigen theme funky\r\n\r\nNo? Not your taste? There are many themes available to you, check out the\r\noh-my-zsh's [page on themes][].\r\n\r\nYou can install themes from unofficial repos too!\r\n\r\n    antigen theme XsErG/zsh-themes themes/lazyuser\r\n\r\nSee? It's easy! To see how that works, refer to the section on the\r\n`antigen theme` command further down.\r\n\r\nNote: Many of those plugins and especially themes, assume you have the core\r\nlibrary of oh-my-zsh loaded. So, if you want to experiment further, issue a\r\n\r\n    antigen use oh-my-zsh\r\n\r\nand continue until you're tired. At which point you can come back to this page\r\n;)\r\n\r\n## Usage\r\n\r\nSo, now that you're here, I suppose you are convinced and want antigen running\r\nyour shell all the time. Sweet. Let's do it.\r\n\r\nFirst, clone this repo, probably as a submodule if you have your dotfiles in a\r\ngit repo,\r\n\r\n    git clone https://github.com/zsh-users/antigen.git\r\n\r\nThe usage should be very familiar to you if you use Vundle. A typical `.zshrc`\r\nmight look like this\r\n\r\n    source /path-to-antigen clone/antigen.zsh\r\n\r\n    # Load the oh-my-zsh's library.\r\n    antigen use oh-my-zsh\r\n\r\n    # Bundles from the default repo (robbyrussell's oh-my-zsh).\r\n    antigen bundle git\r\n    antigen bundle heroku\r\n    antigen bundle pip\r\n    antigen bundle lein\r\n    antigen bundle command-not-found\r\n\r\n    # Syntax highlighting bundle.\r\n    antigen bundle zsh-users/zsh-syntax-highlighting\r\n\r\n    # Load the theme.\r\n    antigen theme robbyrussell\r\n\r\n    # Tell antigen that you're done.\r\n    antigen apply\r\n\r\nOpen your zsh with this zshrc and you should see all the bundles you defined\r\nhere, getting installed. Once its done, you are ready to roll. The complete\r\nsyntax for the `antigen bundle` command is discussed further down on this page.\r\n\r\nYou can find more examples in the wiki: [Antigen in the wild][wild].\r\n\r\n## Motivation\r\n\r\nIf you use zsh and [oh-my-zsh][], you know that having many different plugins\r\nthat are developed by many different authors in a single (sub)repo is not very\r\neasy to maintain. There are some really fantastic plugins and utilities in\r\noh-my-zsh, but having them all in a single repo doesn't really scale well. And I\r\nadmire robbyrussell's efforts for reviewing and merging the gigantic number of\r\npull requests the project gets. We need a better way of plugin management.\r\n\r\nThis was discussed on [a][1] [few][2] [issues][3], but it doesn't look like\r\nthere was any progress made. So, I'm trying to start this off with antigen,\r\nhoping to better this situation. Please note that I'm by no means a zsh or any\r\nshell script expert (far from it).\r\n\r\n[1]: https://github.com/robbyrussell/oh-my-zsh/issues/465\r\n[2]: https://github.com/robbyrussell/oh-my-zsh/issues/377\r\n[3]: https://github.com/robbyrussell/oh-my-zsh/issues/1014\r\n\r\nInspired by vundle, antigen can pull oh-my-zsh style plugins from various github\r\nrepositories. You are not limited to use plugins from the oh-my-zsh repository\r\nonly and you don't need to maintain your own fork and pull from upstream every\r\nnow and then. I actually encourage you to grab plugins and scripts from various\r\nsources, straight from the authors, before they even submit it to oh-my-zsh as a\r\npull request.\r\n\r\nAntigen also lets you switch the prompt theme with one command, just like that\r\n\r\n    antigen theme candy\r\n\r\nand your prompt is changed, just for this session of course (unless you put this\r\nline in your `.zshrc`).\r\n\r\n## Commands\r\n\r\n### antigen bundle\r\n\r\nThis command tells antigen to install (if not already installed) and load the\r\ngiven plugin. The simplest usage follows the following syntax.\r\n\r\n    antigen bundle <plugin-name>\r\n\r\nThis will install and load the `plugins/<name>` directory from [robbyrussell's\r\noh-my-zsh][oh-my-zsh] (can be changed by setting `ANTIGEN_DEFAULT_REPO_URL`).\r\n\r\nHowever, the above is just syntax sugar for the extended syntax of the\r\n`antigen bundle` command.\r\n\r\n    antigen bundle [<url> [<loc>]]\r\n\r\nwhere `<url>` is the repository url and it defaults to [robbyrussell's\r\noh-my-zsh][oh-my-zsh] repo (can be changed by setting `ANTIGEN_DEFAULT_REPO_URL`\r\ndiscussed further down). `<loc>` is the path under this repository which has the\r\nzsh plugin. This is typically the directory that contains a `*.plugin.zsh` file,\r\nbut it could contain a completion file or just many `*.zsh` files to be sourced.\r\n`<loc>` defaults to `/`, which indicates the repository itself is a plugin.\r\n\r\nAn example invocation would be\r\n\r\n    # The following is the same as `antigen bundle ant`. But for demonstration\r\n    # purposes, we use the extended syntax here.\r\n    antigen bundle https://github.com/robbyrussell/oh-my-zsh.git plugins/ant\r\n\r\nThis would install the ant plugin from robbyrussell's oh-my-zsh repo. Of course,\r\ngithub url's can be shortened.\r\n\r\n    antigen bundle robbyrussell/oh-my-zsh plugins/ant\r\n\r\nAnd since this repo is the default, even that isn't necessary. But we can't\r\nspecify the `loc` without giving the first argument.\r\n\r\nFor this and a few other reasons, `antigen bundle` also supports a simple\r\nkeyword argument syntax, using which we can rewrite the above as\r\n\r\n    antigen bundle --loc=plugins/ant\r\n\r\nWhich picks up the default for the `url` argument, and uses the `loc` given to\r\nit.\r\n\r\n*Note* that you can mix and match positional and keyword arguments. But you\r\ncan't have positional arguments after keyword arguments.\r\n\r\n    antigen bundle robbyrussell/oh-my-zsh --loc=plugins/ant\r\n\r\nAnd keyword arguments don't care about the order in which the arguments are\r\nspecified. The following is perfectly valid.\r\n\r\n    antigen bundle --loc=plugins/ant --url=robbyrussell/oh-my-zsh\r\n\r\nYou can also specify a local directory on your file system as a bundle. In this\r\ncase, make sure the path you give is the absolute path (i.e., starts with a\r\n`/`). Relative paths are not supported. If the repo you gave is a local\r\ndirectory path, then it is not necessary that this path is a git repo. Please\r\nrefer to the notes on `--no-local-clone` below.\r\n\r\nThis command can also be used from your shell environment. This allows you to\r\ninstall plugins on the fly and try them out. Of course if you want a bundle to\r\nbe available every time you open a shell, put it in your `.zshrc`.\r\n\r\nOther keyword-only arguments accepted:\r\n\r\n`--branch={git-branch-name}` &mdash; Specify the branch of the git repo to be\r\nused for this bundle (without the braces of course). The default is whatever\r\nbranch the clone comes with, which is usually `master`. For example,\r\n\r\n    antigen bundle github-user/repo --branch=develop\r\n\r\nThis will get the plugin as in the branch `develop`.\r\n\r\nNote that if you specify two plugins to be loaded from the same git repo, but\r\ndifferent branches, then two separate clones of this repo will be maintained.\r\nThis is a small implementation detail and shouldn't influence you in any way.\r\n\r\n`--no-local-clone` &mdash; This command can be useful if you are developing a\r\nplugin and already have a clone on your local file system. If this argument is\r\nnot given, even if the given repo url is a local path, a clone is made in the\r\n`$ADOTDIR/repos`, and the plugin is loaded from that clone. But, if you give\r\nthis argument, the plugin is sourced straight from the repo location, without\r\ncreating a clone. For example,\r\n\r\n    antigen bundle /absolute/path/to/the/plugin --no-local-clone\r\n\r\nNote that if the repo url is *not* an absolute local path or a branch has been\r\nspecified with the `--branch` option, this argument has no effect. That is,\r\nfor this option to have any affect, the repo url must be an absolute local path\r\nand no `--branch` should be specified.\r\n\r\nAlso, if the local path given as the url is not a git repo, then this\r\nargument is forced as it doesn't makes sense to *clone* something that's not a\r\ngit repo. This property can be used to load any utility scripts you have in your\r\ndotfiles repo. For example,\r\n\r\n    antigen bundle $HOME/dotfiles/oh-my-zsh/custom\r\n\r\nIn addition to the above discussed arguments, `antigen bundle` also takes a\r\n`btype` keyword-only argument, that is used internally. You shouldn't be\r\nconcerned with this argument, its only used internally and will probably go away\r\nin the future.  It indicates whether the bundle is a theme or a simple plugin.\r\n\r\n### antigen bundles\r\n\r\nIf you have a fair number of bundles, using the `antigen bundle` command can\r\nlook cumbersome. You can use the `antigen bundles` command to *bulk* define\r\nbundles instead of individual calls to `antigen bundle`.\r\n\r\nUsage is pretty straightforward. Just pipe the bundle specifications, just as\r\nyou would give to the `antigen bundle` command, one per line, into the\r\n`antigen bundles` command. The easiest way to do this, is using the heredoc\r\nsyntax.\r\n\r\n    antigen bundles <<EOBUNDLES\r\n      # Guess what to install when running an unknown command.\r\n      command-not-found\r\n\r\n      # The heroku tool helper plugin.\r\n      heroku\r\n    EOBUNDLES\r\n\r\nThis is equivalent to\r\n\r\n    antigen bundle command-not-found\r\n    antigen bundle heroku\r\n\r\nOf course, as you can see, from the lines piped to `antigen bundles`, empty\r\nlines and those starting with a `#` are ignored. The rest are passed to\r\n`antigen bundle` without any quoting rules applied. They are actually `eval`-ed\r\nwith the `antigen bundle` command. See the source if you want to really\r\nunderstand how it works. Its a very small function.\r\n\r\n*Note*: Indenting the contents inside the EOBUNDLES heredoc is not required for\r\nantigen-bundles to work. Its allowed (and encouraged) to improve readability.\r\n\r\n### antigen update\r\n\r\nThis is something you might not want to put in your `.zshrc`. Instead, run it\r\noccasionally to update all your plugins. It doesn't take any arguments.\r\n\r\n    antigen update\r\n\r\nPlease note that the updates that are downloaded are not immediately available.\r\nYou have to open a new shell to be able to see the changes. This is a limitation\r\nby design since reloading all the plugins *might* have some nasty side effects\r\nthat may not be immediately apparent. Let's just say it can make your shell act\r\nreal quirky.\r\n\r\n**Please note**: This command is not for updating *antigen* itself. Its for\r\nupdating the bundles you are using with antigen. To update your copy of antigen,\r\nuse the `selfupdate` command described further below.\r\n\r\n### antigen revert <sup>&alpha;</sup>\r\n\r\nReverts the state of all your plugins to how they were before the last\r\n`antigen update`. This command is currently experimental, so don't rely too much\r\non it. There is a test for it, and it passes, so it should work fine though.\r\n\r\nTakes no options.\r\n\r\nInsider detail: The information for reverting is stored in\r\n`$ADOTDIR/revert-info` file.  If its not present, reverting is not possible.\r\n\r\n### antigen list\r\n\r\nUse this command to list out the currently *loaded* plugins. Keep in mind that\r\nthis includes any bundles installed on-the-fly.\r\n\r\nTakes no arguments. Gives out four entries per line of output, denoting the\r\nfollowing fields of each bundle.\r\n\r\n    <repo-url> <loc> <btype> <has-local-clone?>\r\n\r\nThe `btype` field is an internal detail, that specifies if the bundle is a\r\n`plugin` or a `theme`.\r\n\r\nThe final field is `true` or `false` reflecting whether there is a local clone\r\nfor this bundle.\r\n\r\n### antigen cleanup\r\n\r\nUsed to clean up the clones of repos which are not used by any plugins currently\r\nloaded. It takes no arguments. When run, it lists out the repo-clones that are\r\navailable but are not used by any plugin *currently loaded*.\r\n\r\nThis command, by default asks for confirmation before deleting the unused\r\nclones. If the `--force` argument is given, then this confirmation is not asked.\r\nIt straight away deletes all the unused clones. This option makes this command\r\nusable in a non-interactive fashion.\r\n\r\n### antigen use\r\n\r\nThis command lets you load any (supported) zsh pre-packaged framework, like\r\noh-my-zsh. Usage is\r\n\r\n    antigen use oh-my-zsh\r\n\r\nAdditional arguments may be present depending on the framework you are\r\n`use`-ing. Here are the supported frameworks.\r\n\r\n#### oh-my-zsh\r\n\r\nThis is (almost) the same as\r\n\r\n    antigen bundle --loc=lib\r\n\r\nSo, it basically installs the oh-my-zsh's library as a bundle.\r\n\r\nOne other thing it does is that some oh-my-zsh plugins expect a `$ZSH` set to\r\nthe full path of the oh-my-zsh clone being used. This is also set to the\r\ncorrect path, if not already set to something else.\r\n\r\nPlease note that this assumes that the `ANTIGEN_DEFAULT_REPO_URL` is set to the\r\noh-my-zsh repo or a fork of that repo. If you want to specify the `url` too,\r\nthen you can't use the `antigen use oh-my-zsh` short cut. You have to do that\r\ndirectly with the `antigen bundle` command.\r\n\r\nUse\r\n\r\n    antigen use oh-my-zsh\r\n\r\nin  your `.zshrc`, before any `antigen bundle` declarations. It takes no further\r\narguments.\r\n\r\n#### prezto\r\n\r\nThis is (almost, but not quite) the same as doing,\r\n\r\n    antigen bundle sorin-ionescu/prezto\r\n\r\nThat is, initializes the canonical repo of the prezto framework. Please note\r\nthat prezto support is very new and experimental in antigen. If you find any\r\nbugs, please report over on github issues.\r\n\r\nTakes no further arguments.\r\n\r\n### antigen theme\r\n\r\nUsed for switching the prompt theme. Invoke it with the name of the theme you\r\nwant to use.\r\n\r\n    antigen theme fox\r\n\r\nThis will get the theme file located at `themes/fox.zsh-theme` in the repo\r\nspecified by `ANTIGEN_DEFAULT_REPO_URL`.\r\n\r\nTo pull themes from other repositories, use `antigen theme` just like\r\n`antigen bundle`. Exactly the same, just make sure the `url` and `loc`\r\ncombination point to a theme file, having a `.zsh-theme` extension.\r\n\r\nFor example,\r\n\r\n    antigen theme robbyrussell/oh-my-zsh themes/apple\r\n\r\nWill pull the apple theme from the canonical oh-my-zsh repo. Also, note that the\r\n`.zsh-theme` extension is not present. It can be given, its optional.\r\n\r\nYou can use this command to change your theme on the fly in your shell. Go on,\r\ntry out a few themes in your shell before you set it in your `.zshrc`.\r\n\r\n**Note**: Some themes use functions that are loaded by `antigen use oh-my-zsh`.\r\nSo, to avoid any trouble, run `antigen use oh-my-zsh` if you haven't already\r\nbefore experimenting with themes. If you have `antigen use oh-my-zsh` in your\r\n`.zshrc`, you're covered.\r\n\r\n**Note**: Do *not* provide the `--btype` argument to `antigen theme`. Its an\r\ninternal argument.\r\n\r\n### antigen apply\r\n\r\nYou have to add this command after defining all bundles you need, in your zshrc.\r\nThe completions defined by your bundles will be loaded at this step.\r\n\r\nIt is possible to load completions as and when a bundle is specified with the\r\nbundle command, in which case this command would not be necessary. But loading\r\nthe completions is a time-consuming process, so if the completions were loaded\r\nat every call to `antigen bundle`, your shell will start noticeably slow when\r\nyou have a good number of bundle specifications.\r\n\r\nHowever, if you can suggest a way so that this would not be necessary, I am very\r\ninterested in discussing it. Please open up an issue with your details. Thanks.\r\n\r\n### antigen snapshot <sup>&alpha;</sup>\r\n\r\nCreates a snapshot of all the clones you currently have *active* including the\r\ngit version hash they are at and save it to a snapshot file. *Active* means, the\r\nclones for those listed by `antigen cleanup` are not included in the snapshot.\r\n\r\nTakes one optional argument, the file name in which the snapshot is to be saved.\r\nDefaults to `antigen snapshot`.\r\n\r\n**Note**: The snapshot currently *only* contains the details of those bundles\r\nthat have a clone. That is, bundles that have `--no-local-clone` set or are\r\ndirectly sourced from your file system (without a git repo), are not recorded\r\nin the snapshot file.\r\n\r\n### antigen restore <sup>&alpha;</sup>\r\n\r\nRestore the bundles state as specified in the snapshot. Takes one required\r\nargument, the snapshot file name to read.\r\n\r\nAlthough it restores the clones of the repos specified in the snapshot file, any\r\nother clones present in your environment are not touched. This behavior may\r\nchange in the future.\r\n\r\n### antigen selfupdate\r\n\r\nUse this command to update your copy of antigen. It basically does a `git pull`\r\non your antigen's clone, *if* it is a git clone. Otherwise, it doesn't do\r\nanything.\r\n\r\nTakes no options.\r\n\r\n### antigen help\r\n\r\nThis exists so that there can be some help right in the command line. Currently\r\nit doesn't provide much help other than redirecting you to the project page for\r\ndocumentation. It is intended to provide more meaning and sub-command specific\r\nhelp in the future.\r\n\r\nI could use some help here as I'm not that good at writing documentation that\r\nlooks good as output on the command line.\r\n\r\n## Configuration\r\n\r\nThe following environment variables can be set to customize the behavior of\r\nantigen. Make sure you set them *before* source-ing `antigen.zsh`.\r\n\r\n`ANTIGEN_DEFAULT_REPO_URL` &mdash; This is the default repository url that is\r\nused for `bundle` commands. The default value is robbyrussell's oh-my-zsh repo,\r\nbut you can set this to the fork url of your own fork.\r\n\r\n`ADOTDIR` &mdash; This directory is used to store all the repo clones, your\r\nbundles, themes, caches and everything else antigen requires to run smoothly.\r\nDefaults to `$HOME/.antigen`.\r\n\r\n**Note**: `ANTIGEN_REPO_CACHE` & `ANTIGEN_BUNDLE_DIR` &mdash; These variables\r\nwere used previously but are now removed. Please use `ADOTDIR` instead, as\r\nmentioned above.\r\n\r\n## Running the tests\r\n\r\nAll the tests are in the `tests` folder and are run using the [cram][] test\r\nsystem. The latest version on that website, as of today is v0.5, which does not\r\nhave the `--shell` argument which is required to run our tests. So, to get the\r\ncorrect version of cram, run\r\n\r\n    pip install -r requirements.txt\r\n\r\nWith that, once you have cram installed, you can run the tests as\r\n\r\n    make\r\n\r\nIf you are making a feature addition, I'd really appreciate if you can add a\r\ntest for your feature. Even if you can add a test for an existing feature, that\r\nwould be great as the tests are currently seriously lagging behind the full\r\nfunctionality of antigen.\r\n\r\n## Notes on writing plugins\r\n\r\nMost shell utilities/plugins are made up of just one file. For a plugin called\r\n`awesomeness`, create a `awesomeness.plugin.zsh` and code away.\r\n\r\nThat said, even if you write a single file as a `.sh` file with the goodness you\r\nwant to create, antigen will work just fine with it. The `*.plugin.zsh` way is\r\nrecommended by antigen, because it is widely used because of the [oh-my-zsh][]\r\nproject.\r\n\r\nIf you want to know how antigen loads the plugins, do continue.\r\n\r\nFirstly, antigen looks for a `*.plugin.zsh` file in the plugin directory. If\r\npresent, it will source *only* this script. Nothing else is sourced. This is for\r\noh-my-zsh style plugins.\r\n\r\nSecondly, it looks for a `init.zsh` file in the plugin directory. If present, it\r\nwill source *only* this script. Nothing else is sourced. This is for prezto\r\nstyle modules.\r\n\r\nOtherwise, it looks for `*.zsh` files and if there are any, *all* of them are\r\nsourced. The order in which they are sourced is not currently defined. Please\r\ndon't rely on this order. Nothing else is sourced after all the `*.zsh` scripts.\r\n\r\nIf no `*.zsh` files are present, it finally looks for any `*.sh` files and\r\nsources *all* of them. Again, the order in which they are sourced in not\r\ncurrently defined.\r\n\r\nNo matter which (or none) of the above happen to be sourced, this plugin\r\ndirectory is added to the zsh's function path (`$fpath`) so that any completions\r\nin it are loaded.\r\n\r\nOne exception to this rule is that if this plugin is a theme. In which case the\r\ntheme script is just sourced and nothing else is done. Not even adding to\r\n`$fpath`.\r\n\r\n## A note on external zsh plugins\r\n\r\nAntigen downloads zsh scripts and sources them, according to your\r\nspecifications. As such, these scripts are capable of doing some *real* damage\r\nto your system. If you are only downloading scripts from oh-my-zsh and/or\r\nprezto, you're probably fine, since there is a second level of manual checking\r\nbefore a script gets into the framework.\r\n\r\nBut, if you are adding a script from any other source, please check the source\r\ncode of the plugin to see its not doing anything malicious, before adding it to\r\nyour `.zshrc`.\r\n\r\n## Meta\r\n\r\n### Helping out\r\n\r\nAntigen is licensed with the [MIT License][license].\r\n\r\nTo contribute, please read the [contributing wiki page][contributing] before\r\nsending pull requests. If its a long/complicated change, please consider opening\r\nan [issue][] first so we can discuss it out. Thanks!\r\n\r\n### Feedback please\r\n\r\nAny comments/suggestions/feedback welcome. Please say hello to me\r\n([@sharat87][twitter]) on twitter. Or open an issue to discuss something\r\n(anything!) about the project ;).\r\n\r\n\r\n[Vundle]: https://github.com/gmarik/vundle\r\n[page on themes]: https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\r\n[wild]: https://github.com/zsh-users/antigen/wiki/In-the-wild\r\n[syntax highlighting plugin]: https://github.com/zsh-users/zsh-syntax-highlighting\r\n[autoenv]: https://github.com/kennethreitz/autoenv\r\n[f-autoenv]: https://github.com/sharat87/autoenv\r\n[oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\r\n[cram]: https://bitheap.org/cram/\r\n[issue]: https://github.com/zsh-users/antigen/issues\r\n[license]: http://mit.sharats.me\r\n[contributing]: https://github.com/zsh-users/antigen/wiki/Contributing\r\n[twitter]: http://twitter.com/sharat87\r\n","google":"UA-32559609-1","note":"Don't delete this file! It's used internally to help with page regeneration."}